<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="0" total="5" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="47" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="47" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
      <class name="MyTestPackage.TestPractice">
        <test-method status="PASS" signature="beforesuite()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="beforesuite" is-config="true" duration-ms="12" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforesuite -->
        <test-method status="PASS" signature="beforetest()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="beforetest" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="beforetest()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="beforetest" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="beforeclass()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="beforeclass" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method status="SKIP" signature="method1()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="method1" duration-ms="6" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at MyTestPackage.TestPractice.method1(TestPractice.java:39)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method1 -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="beforemethod" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="AfterMethod()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="AfterMethod" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="beforemethod" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="FAIL" signature="method1()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="method1" duration-ms="2" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at MyTestPackage.TestPractice.method1(TestPractice.java:39)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.retryFailed(Invoker.java:839)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1010)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method1 -->
        <test-method status="PASS" signature="AfterMethod()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="AfterMethod" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="method2()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="method2" duration-ms="2" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method2 -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="beforemethod" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="AfterMethod()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="AfterMethod" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="Afterclass()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="Afterclass" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Afterclass -->
        <test-method status="PASS" signature="AfterTest()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="AfterTest" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterTest -->
        <test-method status="PASS" signature="AfterTest()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="AfterTest" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterTest -->
        <test-method status="PASS" signature="Aftersuite()[pri:0, instance:MyTestPackage.TestPractice@cc285f4]" name="Aftersuite" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Aftersuite -->
      </class> <!-- MyTestPackage.TestPractice -->
      <class name="MyTestPackage.TestPractice2">
        <test-method status="PASS" signature="method1()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="method1" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method1 -->
        <test-method status="PASS" signature="beforeclass()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="beforeclass" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="beforemethod" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="beforemethod()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="beforemethod" is-config="true" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method status="PASS" signature="Aftermethod()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="Aftermethod" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Aftermethod -->
        <test-method status="PASS" signature="method2()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="method2" duration-ms="1" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method2 -->
        <test-method status="PASS" signature="Aftermethod()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="Aftermethod" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Aftermethod -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:MyTestPackage.TestPractice2@55f3ddb1]" name="AfterClass" is-config="true" duration-ms="0" started-at="2021-06-18T09:25:42Z" finished-at="2021-06-18T09:25:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterClass -->
      </class> <!-- MyTestPackage.TestPractice2 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
